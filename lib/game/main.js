// Generated by CoffeeScript 1.6.2
(function() {
  window.tj = {};

  ig.module('game.main').requires('impact.game', 'game.entities.player_castle', 'game.entities.neutral_castle', 'game.entities.enemy_castle', 'game.gui.frame', 'game.gui.minimap', 'game.levels.main').defines(function() {
    var height, width;

    width = parseInt($(document).width() / 32) * 32;
    height = parseInt($(document).height() / 32) * 32;
    tj.Main = ig.Game.extend({
      init: function() {
        ig.input.bind(ig.KEY.UP_ARROW, 'up');
        ig.input.bind(ig.KEY.RIGHT_ARROW, 'right');
        ig.input.bind(ig.KEY.DOWN_ARROW, 'down');
        ig.input.bind(ig.KEY.LEFT_ARROW, 'left');
        ig.input.bind(ig.KEY.MOUSE1, 'click');
        this.getDimensions();
        this.loadRandomizedLevel(LevelMain);
        this.rBorder = this.backgroundMaps[0].pxWidth - this.play_w;
        this.bBorder = this.backgroundMaps[0].pxHeight - this.play_h;
        this.frame = new tj.Frame(this);
        this.minimap = new tj.Minimap(this);
        return this.placeCastles();
      },
      loadRandomizedLevel: function(level) {
        level.layer[0].data.forEach(function(row, r_i) {
          return row.forEach(function(column, c_i) {
            var idx, newData;

            idx = parseInt((column - 1) / 4);
            newData = (idx * 4) + [1, 2, 3, 4].random();
            return level.layer[0].data[r_i][c_i] = newData;
          });
        });
        return this.loadLevel(level);
      },
      update: function() {
        var c_x, c_y, x, y;

        if (ig.input.state('left')) {
          this.scrollLeft();
        }
        if (ig.input.state('right')) {
          this.scrollRight();
        }
        if (ig.input.state('up')) {
          this.scrollUp();
        }
        if (ig.input.state('down')) {
          this.scrollDown();
        }
        this.minimap.update();
        this.parent();
        if (ig.input.pressed('click')) {
          x = ig.input.mouse.x;
          y = ig.input.mouse.y;
          c_x = parseInt((this.screen.x + x) / 32);
          c_y = parseInt((this.screen.y + y) / 32);
          return console.log("Mouse " + x + "," + y, "Cell " + c_x + "," + c_y);
        }
      },
      draw: function() {
        return this.parent();
      },
      getDimensions: function() {
        this.width = width;
        this.height = height;
        this.tileSize = 32;
        this.rOffset = $(document).width() % 32;
        this.bOffset = $(document).height() % 32;
        this.play_w = this.width - this.tileSize - 256 - 10;
        return this.play_h = this.height - this.tileSize;
      },
      scrollLeft: function() {
        if (this.screen.x > 0) {
          return this.screen.x -= 20;
        } else {
          return this.screen.x = -this.tileSize;
        }
      },
      scrollRight: function() {
        if (this.screen.x < this.rBorder) {
          return this.screen.x += 20;
        } else {
          return this.screen.x = this.rBorder;
        }
      },
      scrollDown: function() {
        if (this.screen.y < this.bBorder) {
          return this.screen.y += 20;
        } else {
          return this.screen.y = this.bBorder;
        }
      },
      scrollUp: function() {
        if (this.screen.y > 0) {
          return this.screen.y -= 20;
        } else {
          return this.screen.y = -this.tileSize;
        }
      },
      placeCastles: function() {
        var enemyCell, neutralCells, playerCell,
          _this = this;

        playerCell = {
          x: 12,
          y: 12
        };
        neutralCells = [
          {
            x: 33,
            y: 10
          }, {
            x: 33,
            y: 30
          }, {
            x: 47,
            y: 54
          }, {
            x: 79,
            y: 53
          }, {
            x: 81,
            y: 76
          }, {
            x: 46,
            y: 77
          }, {
            x: 21,
            y: 83
          }, {
            x: 29,
            y: 117
          }, {
            x: 68,
            y: 98
          }, {
            x: 115,
            y: 117
          }, {
            x: 117,
            y: 86
          }, {
            x: 61,
            y: 7
          }, {
            x: 83,
            y: 38
          }, {
            x: 114,
            y: 19
          }
        ];
        enemyCell = {
          x: 114,
          y: 59
        };
        this.spawnEntity(tj.PlayerCastle, playerCell.x * this.tileSize, playerCell.y * this.tileSize - 8);
        _(neutralCells).each(function(i) {
          return _this.spawnEntity(tj.NeutralCastle, i.x * _this.tileSize, i.y * _this.tileSize - 8);
        });
        return this.spawnEntity(tj.EnemyCastle, enemyCell.x * this.tileSize, enemyCell.y * this.tileSize - 8);
      }
    });
    return ig.main('#canvas', tj.Main, 60, width, height, 1);
  });

}).call(this);
