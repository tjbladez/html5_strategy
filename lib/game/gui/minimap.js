// Generated by CoffeeScript 1.6.2
(function() {
  ig.module('game.gui.minimap').requires('impact.background-map').defines(function() {
    return tj.Minimap = ig.BackgroundMap.extend({
      chunkSize: 256,
      preRender: true,
      enabled: false,
      foreground: true,
      generated: false,
      scaleRatio: 16,
      init: function(game) {
        var data, tileSize;

        data = game.backgroundMaps[0].data;
        tileSize = game.tileSize / this.scaleRatio;
        this.canvas_h = tileSize * data.length;
        this.canvas_w = tileSize * data[0].length;
        this.parent(tileSize, data, 'public/media/minimap_tileset.png');
        return this.castleImgs = new ig.Image('public/media/minimap_castles.png');
      },
      generate: function() {
        if (!this.tiles.loaded || this.generated) {
          return;
        }
        this.preRenderMapToChunks();
        this.$map = $('<div id="minimap"></div>');
        this.$map.css({
          top: ig.game.tileSize,
          right: ig.game.rOffset
        });
        this.$map.append(this.preRenderedChunks[0][0]);
        this.$dynamic = $('<canvas class="dynamic"></canvas>');
        this.$dynamic.prop('width', this.canvas_w);
        this.$dynamic.prop('height', this.canvas_h);
        this.$map.append(this.$dynamic);
        $('body').append(this.$map);
        return this.generated = true;
      },
      update: function() {
        var ctx;

        if (this.generated) {
          ctx = this.$dynamic[0].getContext('2d');
          ctx.clearRect(0, 0, this.canvas_w, this.canvas_h);
          this.updateCurrentLocation(ctx);
          return this.updateCastles(ctx);
        } else {
          return this.generate();
        }
      },
      updateCurrentLocation: function(ctx) {
        var h, w, x, y;

        h = ig.game.play_h / ig.game.tileSize * 2;
        w = ig.game.play_w / ig.game.tileSize * 2;
        x = Math.round(ig.game.screen.x / ig.game.tileSize * 2);
        y = Math.round(ig.game.screen.y / ig.game.tileSize * 2);
        return ctx.strokeRect(x, y, w, h);
      },
      updateCastles: function(ctx) {
        var _this = this;

        _(ig.game.castles.player).each(function(i) {
          return ctx.drawImage(_this.castleImgs.data, 0, 0, 6, 5, i.x * 2, i.y * 2, 6, 5);
        });
        _(ig.game.castles.neutral).each(function(i) {
          return ctx.drawImage(_this.castleImgs.data, 6, 0, 6, 5, i.x * 2, i.y * 2, 6, 5);
        });
        return _(ig.game.castles.enemy).each(function(i) {
          return ctx.drawImage(_this.castleImgs.data, 12, 0, 6, 5, i.x * 2, i.y * 2, 6, 5);
        });
      }
    });
  });

}).call(this);
